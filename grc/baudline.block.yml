# auto-generated by grc.converter

id: baudline_sink
label: Baudline Sink

parameters:
-   id: type
    label: Type
    dtype: enum
    default: complex
    options: [complex, float, complex_short, ishort, short]
    option_labels: [Float (complex), Float (real), Short (complex), IShort (complex),
        Short (real)]
    option_attributes:
        channels: [2, 1, 2, 2, 1]
        complex: [True, False, True, True, False]
        fmt: [le32f, le32f, le16, le16, le16]
        item_size: [8, 4, 4, 2, 2]
        type: [complex, float, short, short, short]
        vlen: [1, 1, 2, 1, 1]
    hide: part
-   id: samp_rate
    label: Sample Rate
    dtype: real
    default: samp_rate
-   id: baseband_freq
    label: Baseband Freq
    dtype: real
    default: 0
    hide: ${ ('none' if baseband_freq != 0 else 'part') }
-   id: channel_count
    label: Channels
    dtype: int
    default: 1
    hide: ${ ('none' if channel_count != 1 else 'part') }
-   id: peak_hold
    label: Peak Hold
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    option_labels: ['On', 'Off']
    hide: ${ ('none' if str(peak_hold) == 'True' else 'part') }
-   id: overlap
    label: Overlap
    dtype: int
    default: 0
    hide: ${ ('none' if overlap != 0 else 'part') }
-   id: slide_size
    label: Slide Size
    dtype: int
    default: 0
    hide: ${ ('none' if slide_size != 0 else 'part') }
-   id: fft_size
    label: FFT Size
    dtype: int
    default: 0
    hide: ${ ('none' if fft_size != 0 else 'part') }
-   id: jump_step
    label: FPS Jump Step
    dtype: int
    default: 0
    hide: ${ ('none' if jump_step != 0 else 'part') }
-   id: x_slip
    label: X Slip
    dtype: int
    default: 0
    hide: ${ ('none' if x_slip != 0 else 'part') }
-   id: decim
    label: Decimation
    dtype: int
    default: 1
    hide: ${ ('none' if decim > 1 else 'part') }
-   id: scale
    label: Scale
    dtype: real
    default: 1.0
    hide: ${ ('none' if scale != 1.0 else 'part') }
-   id: mode
    label: Mode
    dtype: enum
    default: pipe
    options: [pipe, fifo-buf, fifo-unbuf]
    option_labels: [Pipe, FIFO (buffered), FIFO (unbuffered)]
    option_attributes:
        buf: ['True', 'True', 'False']
        mode: [pipe, fifo, fifo]
-   id: kill_on_del
    label: Kill on Close
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: memory
    label: Memory (MB)
    dtype: int
    default: 0
    hide: ${ ('none' if memory > 1 else 'part') }
-   id: extra
    label: Extra
    dtype: raw
    default: '{}'
    hide: ${ ('none' if len(extra) > 0 else 'part') }

inputs:
-   domain: stream
    dtype: ${ type.type }
    vlen: ${ type.vlen }
asserts:
- ${ decim > 0 }

templates:
    imports: |-
        from baz import baudline
        from gnuradio import gr
    make: "baudline.baudline_sink(\n\t\tfmt='${type.fmt}',\n\t\titem_size=${type.item_size},\n\
        \t\tis_complex=${type.complex},\n\t\tchannels=${type.channels},\n\t\tsample_rate=${samp_rate},\n\
        \t\taggregate_channel_count=${channel_count},\n\t\tbaseband_freq=${baseband_freq},\n\
        \t\tdecimation=${decim},\n\t\tscale=${scale},\n\t\toverlap=${overlap},\n\t\
        \tslide_size=${slide_size},\n\t\tfft_size=${fft_size},\n\t\tx_slip=${x_slip},\n\
        \t\tjump_step=${jump_step},\n\t\tmode='${mode.mode}',\n\t\tbuffered=${mode.buf},\n\
        \t\tkill_on_del=${kill_on_del},\n\t\tmemory=${memory},\n\t\tpeak_hold=${peak_hold},\n\
        \t\t**${extra})"

file_format: 1
